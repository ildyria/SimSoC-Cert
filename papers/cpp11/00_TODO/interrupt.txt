Xiaomu :

Please could you check the following statements about interrupts in
Simsoc(-cert) for ARM.

Two sides to be considered: handling and generation of exceptions.

Generation of exceptions
Some instructions can generate exceptions too (SWI and BKPT).
They are automatically for Coq (semantics) and C (simlight).

Exception handling
By reading the ARM manual, we know the ARMv6 model handles the exceptions
generated by interruptions or an attempt to execute undefined instructions.
The Coq state includes a field 'exn' containing the raised exceptions.
The Coq semantics includes a mechanism for handling exceptions
(file Arm6_Exception.v). This code was written by hand, not automatically
generated from the manual (there is some pseudo-code, but not headed
by a name as for operations).
In simlight and simlight2, there is no mechanism for handling exceptions.
(The pseudo-code was not translated).
[Claude] Maybe this is not useful, since simlight(2) is not intended to
include communication with co-processors or external drivers?

------------------------------------------------------------------------------

Claude :


- SWI exceptions are implemented. There is one test that uses it. I don't
have the manual here to check, but the pseudo-code of the SWI instruction
should be the same than the pseudo-code of the corresponding exception
handler.
This part is tested using the test "arm_swi".
This test is listed in "test/debug.ml", so I guess SWI exceptions are
implemented, and working, in the Coq simulator too.

- Undefined exceptions are not implemented, but it would be possible to
implement and test them in simlight (and useful, because it would then be
possible to prove the corresponding code).

- Memory exception are not implemented. The tricky point would be that the
memory model has to be completed so that it can answer "memory access
failed", and then the code should trigger the exception.

- For interrupts (IRQ and FIQ), we do not model the corresponding inputs on
the processor, because there is no external devices to be connected (don't
say "external drivers", because drivers are software, and so execute inside
the processor). So even if we implement the exception code in simlight, it
will never been used.

All these exceptions are implemented in SimSoC (and used by Linux).

For SWI, BKPT, undefined instructions, and extenral interrupts, there is no
need for C++ exceptions nor setjmp/longjmp in the simulator.
However, for memory exceptions, SimSoC implements them using C++ exceptions.


------------------------------------------------------------------------------

Vania :


Yes, in simlight and simlight2 so far the goal was only to check the
semantics of instructions that do no fault and ignore external
interrupts.

In particular we should not be concerned by SWI and BKPT at that point
BKPT is used by debuggers to set breakpoints.
SWI is for systems calls to the kernel from user mode.

We can make assumption for now we only simulate kernel mode
programs that never call SWI.

