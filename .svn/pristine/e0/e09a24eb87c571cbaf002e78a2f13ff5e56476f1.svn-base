\svnidlong
{$HeadURL$}
{$LastChangedDate$}
{$LastChangedRevision$}
{$LastChangedBy$}

% Author: \svnfileauthor; Revision: \svnfilerev; Last changed on: \svnfiledate; 
% URL: \url{\svnkw{HeadURL}}

\begin{thoughts}
\itshape
\hfil -----------------------------------------------------------------------------------\par
\hfil \textbf{Changes on \currfilename}

Author: \svnfileauthor; Revision: \svnfilerev; Last changed on: \svnfiledate
\end{thoughts}

% svn propset svn:keywords 'LastChangedBy LastChangedRevision LastChangedDate HeadURL' thisfile.tex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{A Handcrafted Inversion}
\label{sec:hci}

As noticed above, the heart of inversion is a suitable
pattern matching on the hypothesis to be analyzed.
With dependent types, it is possible for different branches
to return a result whose type depends on the constructor.
We make a systematic use of this feature:
our key ingredient is a diagonalization function $\diag$,
which will be used for specifying the type returned on each branch.
The exact shape of $\diag$ range from very simple to somewhat elaborated
according to the goal at hand. 

We recall the basics on dependent pattern matching,
then we successively consider three situations,
corresponding to increasingly complex variants of $\diag$.
In the two first situations, 
we consider inductive predicates with exactly one argument, for simplicity.
The first situation is when all cases are absurd.
The second is when a case is successful (or several cases)
and we need to extract the information contained in successful cases,
making new hypotheses in the environment.
Then we show how to deal with additional arguments,
so that constraints coming from the conclusion have to be propagated
on the new hypotheses.
Finally, we consider more elaborate dependent types
and show how our technique works on a case where \inversion fails.

\subsection{Dependent Pattern Matching}
\label{sec:dpm}

To start with, 
let us take again the example of even numbers.
Here is the corresponding Coq inductive definition.

\medskip
\coqdocinput{chunk21}
\medskip

\noindent
We see that each rule is given by a constructor in a dependent data type
-- also called an inductive predicate or relation because its sort is \Prop.
Therefore, the elementary way to decompose an object of type \eveni $n$
is to use dependent pattern matching.
This is already done by primitive tactics of Coq
such as \coqdockw{case} and \coqdockw{destruct},
which turn out to be powerful enough in many situations, 
when a condition is satisfied:
the conclusion of the current goal fits all arguments of 
the hypothesis to be analyzed by pattern matching.

Let us first illustrate 
dependent pattern matching on even numbers.
Consider a proof $\PROOFEV$ of type $\eveni\;n$
for some natural number $n$.
For each possible constructor, \EZ or \ET, 
we provide a proof term,
respectively $t_\EZ$ and $t_\ET$.
As usual, this term may depend on the arguments 
of the corresponding constructor,
none for \EZ and, say $x$ and $ex$ for \ET.
More importantly for us, $t_\EZ$ and $t_\ET$ may have
different \emph{types}:
the type $P\;n$ of the whole expression depends on $n$;
in the first branch, the type of $t_\EZ$ is $P\;0$ and
in the second branch, the type of $t_\ET$ is $P\; (S\: (S\:x))$.
Therefore, the syntax of the \coqdockw{match} construct
contains a \coqdockw{return} clause with the expected type
of the result $P\;n$ as an argument;
moreover, 
there is also an \coqdockw{in} clause for the type of $\PROOFEV$
which binds $n$:

%\smallskip
\coqdocinput{chunk22}
%\smallskip

\vspace*{-.7\baselineskip}
\noindent
Most of the time, Coq users do not need to go to this
level of detail: 
in interactive proof mode, 
if $n$ and $P\;n$ are clear from the context,
\casetac $\PROOFEV$ will do the job.
More precisely, if we have an hypothesis $H$ of type $\eveni\;n$
and a desired conclusion of type $P\;n$, 
\casetac $H$ will construct a proof term having the previous
shape and answer with two new subgoals:
one for $P\;0$ and one for $P\; (S\: (S\:x))$,
with $\eveni\;x$ as an additional assumption.

As a last remark, let us recall that
an inductive type may have two kinds of arguments.
We don't care about arguments which are ``fixed'' for all constructors:
they are not even considered in pattern matching.
In Coq they are called \emph{parameters}.
The other arguments are called \emph{indexes}.
For example, $\eveni$ has one index and no parameter.

\subsection{Auxiliary Diagonalization Function}
\label{sec:absurd}

More work is needed precisely when there is no obvious relationship
between the conclusion and the hypothesis to be analyzed.
This happens in particular when $H$ is absurd:
the goal should be discharged whatever is its conclusion.
This situation is covered as follows:
the conclusion is converted 
to an expression \diag $V$,
where $V$ is a value coming from $H$ 
and \diag a suitable diagonal function, such that
the dependent case analysis on $H$ provides only trivial subgoals.
For example, assume that we want to conclude
$4=7$ from the hypothesis $H: \eveni\;1$.
Our diagonal function is then defined as follows.

\medskip
\coqdocinput{chunk24}
%\smallskip

\noindent
Then the conclusion is converted to $\diag\;1$,
and the case analysis on $H$ 
automatically provides two subgoals $\diag\;0$
and $\diag\;(S\: (S\:y))$ for an arbitrary even natural number $y$.
Each of these goals reduce to \True, 
and we are done.
The proof term behind this reasoning is very short
($I$ is the standard proof of \True):

\medskip
\coqdocinput{chunk25}
%\smallskip

%\vspace*{-1.0\baselineskip}
Such functions were already introduced in~\cite{small_inv},
but they work well only for handling absurd hypotheses.
For instance, the examples presented below are out of reach
of~\cite{small_inv}.
In order to explain how to extract information from satisfiable hypotheses,
we start with an obvious generalization of the previous function
for inverting absurd hypotheses.

% \medskip
% \coqdocinput{chunk23}
% \medskip


%%% Local Variables: 
%%% mode: latex
%%% TeX-master: "itp13"
%%% End:
