(**
SimSoC-Cert, a toolkit for generating certified processor simulators
See the COPYRIGHTS and LICENSE files.

Coq representation of a C program automatically generated by Simgen.
*)

Require Import ZArith Cnotations.

Open Scope Z_scope.

(* identifiers *)

Open Scope positive_scope.
Definition mem := 1.
Definition _end := 2.
Definition size := 3.
Definition begin := 4.
Definition SLv6_MMU := 5.
Definition background := 6.
Definition mode := 7.
Definition T_flag := 8.
Definition F_flag := 9.
Definition I_flag := 10.
Definition A_flag := 11.
Definition E_flag := 12.
Definition GE3 := 13.
Definition GE2 := 14.
Definition GE1 := 15.
Definition GE0 := 16.
Definition J_flag := 17.
Definition Q_flag := 18.
Definition V_flag := 19.
Definition C_flag := 20.
Definition Z_flag := 21.
Definition N_flag := 22.
Definition SLv6_StatusRegister := 23.
Definition v_bit := 24.
Definition u_bit := 25.
Definition ee_bit := 26.
Definition SLv6_SystemCoproc := 27.
Definition jump := 28.
Definition pc := 29.
Definition und_regs := 30.
Definition abt_regs := 31.
Definition svc_regs := 32.
Definition irq_regs := 33.
Definition fiq_regs := 34.
Definition user_regs := 35.
Definition id := 36.
Definition cp15 := 37.
Definition spsrs := 38.
Definition cpsr := 39.
Definition mmu_ptr := 40.
Definition SLv6_Processor := 41.
Definition __builtin_fabs := 42.
Definition __builtin_memcpy_aligned := 43.
Definition __builtin_annot_intval := 44.
Definition __builtin_bswap := 45.
Definition __builtin_fsqrt := 46.
Definition __builtin_fmax := 47.
Definition __builtin_fmin := 48.
Definition __builtin_read16_reversed := 49.
Definition __builtin_read32_reversed := 50.
Definition __builtin_write16_reversed := 51.
Definition __builtin_write32_reversed := 52.
Definition abort := 53.
Definition __assert_fail := 54.
Definition struct_SLv6_StatusRegister := 55.
Definition ConditionPassed := 56.
Definition copy_StatusRegister := 57.
Definition struct_SLv6_SystemCoproc := 58.
Definition struct_SLv6_MMU := 59.
Definition struct_SLv6_Processor := 60.
Definition addr_of_reg_m := 61.
Definition proc := 62.
Definition reg_id := 63.
Definition m := 64.
Definition reg_m := 65.
Definition data := 66.
Definition set_reg_m := 67.
Definition reg := 68.
Definition __stringlit_1 := 69.
Definition __stringlit_2 := 70.
Definition set_reg := 71.
Definition inst_size := 72.
Definition new_pc := 73.
Definition __stringlit_3 := 74.
Definition __stringlit_4 := 75.
Definition set_pc_raw := 76.
Definition set_reg_or_pc := 77.
Definition CurrentModeHasSPSR := 78.
Definition printf_ii := 79.
Definition __stringlit_5 := 80.
Definition spsr := 81.
Definition a := 82.
Definition b := 83.
Definition CarryFrom_add2 := 84.
Definition c := 85.
Definition CarryFrom_add3 := 86.
Definition r := 87.
Definition OverflowFrom_add2 := 88.
Definition unused := 89.
Definition OverflowFrom_add3 := 90.
Definition x := 91.
Definition n := 92.
Definition get_bit := 93.
Definition S := 94.
Definition cond := 95.
Definition d := 96.
Definition shifter_operand := 97.
Definition old_Rn := 98.
Definition __stringlit_6 := 99.
Definition ADC := 100.
Definition main := 101.
Close Scope positive_scope.

(* structs and unions *)

Definition typ_struct_struct_SLv6_StatusRegister := 
F[
  N_flag -: int8; 
  Z_flag -: int8; 
  C_flag -: int8; 
  V_flag -: int8; 
  Q_flag -: int8; 
  J_flag -: int8; 
  GE0 -: int8; 
  GE1 -: int8; 
  GE2 -: int8; 
  GE3 -: int8; 
  E_flag -: int8; 
  A_flag -: int8; 
  I_flag -: int8; 
  F_flag -: int8; 
  T_flag -: int8; 
  mode -: int32; 
  background -: uint32].

Definition typ_struct_SLv6_StatusRegister := Tstruct struct_SLv6_StatusRegister typ_struct_struct_SLv6_StatusRegister noattr.

Definition typ_struct_struct_SLv6_MMU := 
F[
  begin -: uint32; 
  size -: uint32; 
  _end -: uint32; 
  mem -: `*` uint8].

Definition typ_struct_SLv6_MMU := Tstruct struct_SLv6_MMU typ_struct_struct_SLv6_MMU noattr.

Definition typ_struct_struct_SLv6_SystemCoproc := 
F[
  ee_bit -: int8; 
  u_bit -: int8; 
  v_bit -: int8].

Definition typ_struct_SLv6_SystemCoproc := Tstruct struct_SLv6_SystemCoproc typ_struct_struct_SLv6_SystemCoproc noattr.

Definition typ_struct_struct_SLv6_Processor := 
F[
  mmu_ptr -: `*` typ_struct_SLv6_MMU; 
  cpsr -: typ_struct_SLv6_StatusRegister; 
  spsrs -: Tarray typ_struct_SLv6_StatusRegister 5 noattr; 
  cp15 -: typ_struct_SLv6_SystemCoproc; 
  id -: uint32; 
  user_regs -: Tarray uint32 16 noattr; 
  fiq_regs -: Tarray uint32 7 noattr; 
  irq_regs -: Tarray uint32 2 noattr; 
  svc_regs -: Tarray uint32 2 noattr; 
  abt_regs -: Tarray uint32 2 noattr; 
  und_regs -: Tarray uint32 2 noattr; 
  pc -: `*` uint32; 
  jump -: int8].

Definition typ_struct_SLv6_Processor := Tstruct struct_SLv6_Processor typ_struct_struct_SLv6_Processor noattr.

(* expression types *)

Definition T1 := Tfunction T[`*` typ_struct_SLv6_Processor; uint8; int32] (`*` uint32).
Definition T2 := `*` typ_struct_SLv6_Processor.
Definition T3 := uint8.
Definition T4 := int32.
Definition T5 := `*` uint32.
Definition T6 := uint32.
Definition T7 := Tfunction T[`*` typ_struct_SLv6_Processor; uint8; int32] uint32.
Definition T8 := typ_struct_SLv6_Processor.
Definition T9 := typ_struct_SLv6_StatusRegister.
Definition T10 := void.
Definition T11 := Tfunction T[`*` int8; `*` int8; uint32; `*` int8] void.
Definition T12 := Tarray uint8 11 noattr.
Definition T13 := Tarray uint8 34 noattr.
Definition T14 := `*` int8.
Definition T15 := Tfunction T[`*` typ_struct_SLv6_Processor; uint8; int32; uint32] void.
Definition T16 := int8.
Definition T17 := Tfunction T[`*` typ_struct_SLv6_Processor] uint32.
Definition T18 := Tarray uint8 14 noattr.
Definition T19 := Tint IBool Unsigned noattr.
Definition T20 := Tarray uint8 49 noattr.
Definition T21 := Tfunction T[`*` typ_struct_SLv6_Processor; uint32] void.
Definition T22 := Tfunction T[`*` typ_struct_SLv6_Processor; uint8; uint32] void.
Definition T23 := Tfunction T[`*` typ_struct_SLv6_Processor] int8.
Definition T24 := Tarray typ_struct_SLv6_StatusRegister 5 noattr.
Definition T25 := `*` typ_struct_SLv6_StatusRegister.
Definition T26 := Tfunction T[`*` void; `*` void] int32.
Definition T27 := Tarray uint8 81 noattr.
Definition T28 := Tfunction T[] void.
Definition T29 := Tfunction T[uint32; uint32] int8.
Definition T30 := Tfunction T[`*` typ_struct_SLv6_Processor; uint8] uint32.
Definition T31 := Tfunction T[`*` typ_struct_SLv6_StatusRegister; int32] int8.
Definition T32 := Tfunction T[`*` typ_struct_SLv6_StatusRegister; `*` typ_struct_SLv6_StatusRegister] void.
Definition T33 := Tfunction T[`*` typ_struct_SLv6_Processor] (`*` typ_struct_SLv6_StatusRegister).
Definition T34 := Tarray uint8 71 noattr.
Definition T35 := Tfunction T[uint32; uint32; uint32] int8.
Definition T36 := Tfunction T[uint32; uint32; int8] int8.

(* global variables *)

Definition gv___stringlit_1 :=
  {| gvar_info := Tarray uint8 34 noattr;
     gvar_init := null_termin_string "../arm6/simlight/slv6_processor.h";
     gvar_readonly := true;
     gvar_volatile := false |}.

Definition gv___stringlit_2 :=
  {| gvar_info := Tarray uint8 11 noattr;
     gvar_init := null_termin_string "reg_id!=15";
     gvar_readonly := true;
     gvar_volatile := false |}.

Definition gv___stringlit_3 :=
  {| gvar_info := Tarray uint8 49 noattr;
     gvar_init := null_termin_string "!(new_pc&(inst_size(proc)-1)) && ""pc misaligned""";
     gvar_readonly := true;
     gvar_volatile := false |}.

Definition gv___stringlit_4 :=
  {| gvar_info := Tarray uint8 14 noattr;
     gvar_init := null_termin_string "pc misaligned";
     gvar_readonly := true;
     gvar_volatile := false |}.

Definition gv___stringlit_5 :=
  {| gvar_info := Tarray uint8 81 noattr;
     gvar_init := null_termin_string "ERROR: Current mode does not have a SPSR (../arm6/simlight/slv6_processor.h:%d)
";
     gvar_readonly := true;
     gvar_volatile := false |}.

Definition gv___stringlit_6 :=
  {| gvar_info := Tarray uint8 71 noattr;
     gvar_init := null_termin_string "ERROR: simulating something unpredictable (../arm6/simlight/adc.c:%d)
";
     gvar_readonly := true;
     gvar_volatile := false |}.

Definition global_variables : list (prod ident (globvar type)) := [(__stringlit_6,gv___stringlit_6); (__stringlit_3,gv___stringlit_3); (__stringlit_2,gv___stringlit_2); (__stringlit_4,gv___stringlit_4); (__stringlit_5,gv___stringlit_5); (__stringlit_1,gv___stringlit_1)].

(* functions *)

Definition fun_printf_ii :=
  (printf_ii, External
  (EF_external printf_ii {| sig_args := [AST.Tint; AST.Tint]; sig_res := Some AST.Tint |})
  T[`*` void; `*` void]
  int32).

Definition fun___builtin_fabs :=
  (__builtin_fabs, External
  (EF_builtin __builtin_fabs {| sig_args := [AST.Tfloat]; sig_res := Some AST.Tfloat |})
  T[float64]
  float64).

Definition fun___builtin_memcpy_aligned :=
  (__builtin_memcpy_aligned, External
  (EF_builtin __builtin_memcpy_aligned {| sig_args := [AST.Tint; AST.Tint; AST.Tint; AST.Tint]; sig_res := None |})
  T[`*` void; `*` void; uint32; uint32]
  void).

Definition fun___builtin_annot_intval :=
  (__builtin_annot_intval, External
  (EF_builtin __builtin_annot_intval {| sig_args := [AST.Tint; AST.Tint]; sig_res := Some AST.Tint |})
  T[`*` int8; int32]
  int32).

Definition fun___builtin_bswap :=
  (__builtin_bswap, External
  (EF_builtin __builtin_bswap {| sig_args := [AST.Tint]; sig_res := Some AST.Tint |})
  T[uint32]
  uint32).

Definition fun___builtin_fsqrt :=
  (__builtin_fsqrt, External
  (EF_builtin __builtin_fsqrt {| sig_args := [AST.Tfloat]; sig_res := Some AST.Tfloat |})
  T[float64]
  float64).

Definition fun___builtin_fmax :=
  (__builtin_fmax, External
  (EF_builtin __builtin_fmax {| sig_args := [AST.Tfloat; AST.Tfloat]; sig_res := Some AST.Tfloat |})
  T[float64; float64]
  float64).

Definition fun___builtin_fmin :=
  (__builtin_fmin, External
  (EF_builtin __builtin_fmin {| sig_args := [AST.Tfloat; AST.Tfloat]; sig_res := Some AST.Tfloat |})
  T[float64; float64]
  float64).

Definition fun___builtin_read16_reversed :=
  (__builtin_read16_reversed, External
  (EF_builtin __builtin_read16_reversed {| sig_args := [AST.Tint]; sig_res := Some AST.Tint |})
  T[`*` uint16]
  uint16).

Definition fun___builtin_read32_reversed :=
  (__builtin_read32_reversed, External
  (EF_builtin __builtin_read32_reversed {| sig_args := [AST.Tint]; sig_res := Some AST.Tint |})
  T[`*` uint32]
  uint32).

Definition fun___builtin_write16_reversed :=
  (__builtin_write16_reversed, External
  (EF_builtin __builtin_write16_reversed {| sig_args := [AST.Tint; AST.Tint]; sig_res := None |})
  T[`*` uint16; uint16]
  void).

Definition fun___builtin_write32_reversed :=
  (__builtin_write32_reversed, External
  (EF_builtin __builtin_write32_reversed {| sig_args := [AST.Tint; AST.Tint]; sig_res := None |})
  T[`*` uint32; uint32]
  void).

Definition fun_abort :=
  (abort, External
  (EF_external abort {| sig_args := []; sig_res := None |})
  T[]
  void).

Definition fun___assert_fail :=
  (__assert_fail, External
  (EF_external __assert_fail {| sig_args := [AST.Tint; AST.Tint; AST.Tint; AST.Tint]; sig_res := None |})
  T[`*` int8; `*` int8; uint32; `*` int8]
  void).

Definition fun_ConditionPassed :=
  (ConditionPassed, External
  (EF_external ConditionPassed {| sig_args := [AST.Tint; AST.Tint]; sig_res := Some AST.Tint |})
  T[`*` typ_struct_SLv6_StatusRegister; int32]
  int8).

Definition fun_copy_StatusRegister :=
  (copy_StatusRegister, External
  (EF_external copy_StatusRegister {| sig_args := [AST.Tint; AST.Tint]; sig_res := None |})
  T[`*` typ_struct_SLv6_StatusRegister; `*` typ_struct_SLv6_StatusRegister]
  void).

Definition fun_addr_of_reg_m :=
  (addr_of_reg_m, External
  (EF_external addr_of_reg_m {| sig_args := [AST.Tint; AST.Tint; AST.Tint]; sig_res := Some AST.Tint |})
  T[`*` typ_struct_SLv6_Processor; uint8; int32]
  (`*` uint32)).

Definition fun_internal_reg_m :=
  {| fn_return := uint32;
     fn_params := [
proc -: `*` typ_struct_SLv6_Processor; 
reg_id -: uint8; 
m -: int32];
     fn_vars := [];
     fn_body :=
return (Some (valof (`*(call (\addr_of_reg_m`:T1) E[\proc`:T2; \reg_id`:T3; \m`:T4] T5)`:T6) T6)) |}.

Definition fun_reg_m :=
  (reg_m, Internal fun_internal_reg_m).

Definition fun_internal_set_reg_m :=
  {| fn_return := void;
     fn_params := [
proc -: `*` typ_struct_SLv6_Processor; 
reg_id -: uint8; 
m -: int32; 
data -: uint32];
     fn_vars := [];
     fn_body :=
(`*(call (\addr_of_reg_m`:T1) E[\proc`:T2; \reg_id`:T3; \m`:T4] T5)`:T6) `= (\data`:T6)`:T6 |}.

Definition fun_set_reg_m :=
  (set_reg_m, Internal fun_internal_set_reg_m).

Definition fun_internal_reg :=
  {| fn_return := uint32;
     fn_params := [
proc -: `*` typ_struct_SLv6_Processor; 
reg_id -: uint8];
     fn_vars := [];
     fn_body :=
return (Some (call (\reg_m`:T7) E[\proc`:T2; \reg_id`:T3; (valof ((valof ((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9) T9)|mode`:T4) T4)] T6)) |}.

Definition fun_reg :=
  (reg, Internal fun_internal_reg).

Definition fun_internal_set_reg :=
  {| fn_return := void;
     fn_params := [
proc -: `*` typ_struct_SLv6_Processor; 
reg_id -: uint8; 
data -: uint32];
     fn_vars := [];
     fn_body :=
((\reg_id`:T3)!=(#15`:T4)`:T4)?(Ecast (#0`:T4) T10)`:(call (\__assert_fail`:T11) E[\__stringlit_2`:T12; \__stringlit_1`:T13; #58`:T4; (Ecast (#0`:T4) T14)] T10)`:T10;;
(call (\set_reg_m`:T15) E[\proc`:T2; \reg_id`:T3; (valof ((valof ((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9) T9)|mode`:T4) T4); \data`:T6] T10) |}.

Definition fun_set_reg :=
  (set_reg, Internal fun_internal_set_reg).

Definition fun_internal_inst_size :=
  {| fn_return := uint32;
     fn_params := [
proc -: `*` typ_struct_SLv6_Processor];
     fn_vars := [];
     fn_body :=
return (Some ((valof ((valof ((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9) T9)|T_flag`:T16) T16)?(#2`:T4)`:(#4`:T4)`:T4)) |}.

Definition fun_inst_size :=
  (inst_size, Internal fun_internal_inst_size).

Definition fun_internal_set_pc_raw :=
  {| fn_return := void;
     fn_params := [
proc -: `*` typ_struct_SLv6_Processor; 
new_pc -: uint32];
     fn_vars := [];
     fn_body :=
((!((\new_pc`:T6)&((call (\inst_size`:T17) E[\proc`:T2] T6)-(#1`:T4)`:T6)`:T6)`:T4)?(Ecast (\__stringlit_4`:T18) T19)`:(#0`:T4)`:T4)?(Ecast (#0`:T4) T10)`:(call (\__assert_fail`:T11) E[\__stringlit_3`:T20; \__stringlit_1`:T13; #68`:T4; (Ecast (#0`:T4) T14)] T10)`:T10;;
((valof (`*(\proc`:T2)`:T8) T8)|jump`:T16) `= (#1`:T4)`:T16;;
(`*(valof ((valof (`*(\proc`:T2)`:T8) T8)|pc`:T5) T5)`:T6) `= ((\new_pc`:T6)+((#2`:T4)*(call (\inst_size`:T17) E[\proc`:T2] T6)`:T6)`:T6)`:T6 |}.

Definition fun_set_pc_raw :=
  (set_pc_raw, Internal fun_internal_set_pc_raw).

Definition fun_internal_set_reg_or_pc :=
  {| fn_return := void;
     fn_params := [
proc -: `*` typ_struct_SLv6_Processor; 
reg_id -: uint8; 
data -: uint32];
     fn_vars := [];
     fn_body :=
`if ((\reg_id`:T3)==(#15`:T4)`:T4)
then (call (\set_pc_raw`:T21) E[\proc`:T2; \data`:T6] T10)
else (call (\set_reg`:T22) E[\proc`:T2; \reg_id`:T3; \data`:T6] T10) |}.

Definition fun_set_reg_or_pc :=
  (set_reg_or_pc, Internal fun_internal_set_reg_or_pc).

Definition fun_internal_CurrentModeHasSPSR :=
  {| fn_return := int8;
     fn_params := [
proc -: `*` typ_struct_SLv6_Processor];
     fn_vars := [];
     fn_body :=
return (Some ((valof ((valof ((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9) T9)|mode`:T4) T4)<(#5`:T4)`:T4)) |}.

Definition fun_CurrentModeHasSPSR :=
  (CurrentModeHasSPSR, Internal fun_internal_CurrentModeHasSPSR).

Definition fun_internal_spsr :=
  {| fn_return := `*` typ_struct_SLv6_StatusRegister;
     fn_params := [
proc -: `*` typ_struct_SLv6_Processor];
     fn_vars := [];
     fn_body :=
`if (call (\CurrentModeHasSPSR`:T23) E[\proc`:T2] T16)
then return (Some (&(`*((valof ((valof (`*(\proc`:T2)`:T8) T8)|spsrs`:T24) T24)+(valof ((valof ((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9) T9)|mode`:T4) T4)`:T25)`:T9)`:T25))
else `do (call (\printf_ii`:T26) E[\__stringlit_5`:T27; #97`:T4] T4);;
(call (\abort`:T28) E[] T10) while (#0`:T4);;
(call (\abort`:T28) E[] T10) |}.

Definition fun_spsr :=
  (spsr, Internal fun_internal_spsr).

Definition fun_internal_CarryFrom_add2 :=
  {| fn_return := int8;
     fn_params := [
a -: uint32; 
b -: uint32];
     fn_vars := [];
     fn_body :=
return (Some (((\a`:T6)+(\b`:T6)`:T6)<(\a`:T6)`:T4)) |}.

Definition fun_CarryFrom_add2 :=
  (CarryFrom_add2, Internal fun_internal_CarryFrom_add2).

Definition fun_internal_CarryFrom_add3 :=
  {| fn_return := int8;
     fn_params := [
a -: uint32; 
b -: uint32; 
c -: uint32];
     fn_vars := [];
     fn_body :=
return (Some ((call (\CarryFrom_add2`:T29) E[\a`:T6; \b`:T6] T16)?(#1`:T4)`:(Ecast (call (\CarryFrom_add2`:T29) E[(\a`:T6)+(\b`:T6)`:T6; \c`:T6] T16) T19)`:T4)) |}.

Definition fun_CarryFrom_add3 :=
  (CarryFrom_add3, Internal fun_internal_CarryFrom_add3).

Definition fun_internal_OverflowFrom_add2 :=
  {| fn_return := int8;
     fn_params := [
a -: uint32; 
b -: uint32];
     fn_vars := [
r -: uint32];
     fn_body :=
($ r`:T6) `= ((\a`:T6)+(\b`:T6)`:T6)`:T6;;
return (Some ((((\a`:T6)^(`~(\b`:T6)`:T6)`:T6)&((\a`:T6)^(\r`:T6)`:T6)`:T6)>>(#31`:T4)`:T6)) |}.

Definition fun_OverflowFrom_add2 :=
  (OverflowFrom_add2, Internal fun_internal_OverflowFrom_add2).

Definition fun_internal_OverflowFrom_add3 :=
  {| fn_return := int8;
     fn_params := [
a -: uint32; 
b -: uint32; 
unused -: int8];
     fn_vars := [];
     fn_body :=
return (Some (call (\OverflowFrom_add2`:T29) E[\a`:T6; \b`:T6] T16)) |}.

Definition fun_OverflowFrom_add3 :=
  (OverflowFrom_add3, Internal fun_internal_OverflowFrom_add3).

Definition fun_internal_get_bit :=
  {| fn_return := int8;
     fn_params := [
x -: uint32; 
n -: uint32];
     fn_vars := [];
     fn_body :=
return (Some (((\x`:T6)>>(\n`:T6)`:T6)&(#1`:T4)`:T6)) |}.

Definition fun_get_bit :=
  (get_bit, Internal fun_internal_get_bit).

Definition fun_internal_ADC :=
  {| fn_return := void;
     fn_params := [
proc -: `*` typ_struct_SLv6_Processor; 
S -: int8; 
cond -: int32; 
d -: uint8; 
n -: uint8; 
shifter_operand -: uint32];
     fn_vars := [
old_Rn -: uint32];
     fn_body :=
($ old_Rn`:T6) `= (call (\reg`:T30) E[\proc`:T2; \n`:T3] T6)`:T6;;
`if (call (\ConditionPassed`:T31) E[&((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9)`:T25; \cond`:T4] T16)
then (call (\set_reg_or_pc`:T22) E[\proc`:T2; \d`:T3; ((\old_Rn`:T6)+(\shifter_operand`:T6)`:T6)+(valof ((valof ((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9) T9)|C_flag`:T16) T16)`:T6] T10);;
`if (((\S`:T16)==(#1`:T4)`:T4)?(Ecast ((\d`:T3)==(#15`:T4)`:T4) T19)`:(#0`:T4)`:T4)
then `if (call (\CurrentModeHasSPSR`:T23) E[\proc`:T2] T16)
then (call (\copy_StatusRegister`:T32) E[&((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9)`:T25; (call (\spsr`:T33) E[\proc`:T2] T25)] T10)
else `do (call (\printf_ii`:T26) E[\__stringlit_6`:T34; #19`:T4] T4);;
(call (\abort`:T28) E[] T10) while (#0`:T4)
else `if ((\S`:T16)==(#1`:T4)`:T4)
then ((valof ((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9) T9)|N_flag`:T16) `= (call (\get_bit`:T29) E[(call (\reg`:T30) E[\proc`:T2; \d`:T3] T6); #31`:T4] T16)`:T16;;
((valof ((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9) T9)|Z_flag`:T16) `= (((call (\reg`:T30) E[\proc`:T2; \d`:T3] T6)==(#0`:T4)`:T4)?(#1`:T4)`:(#0`:T4)`:T4)`:T16;;
((valof ((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9) T9)|C_flag`:T16) `= (call (\CarryFrom_add3`:T35) E[\old_Rn`:T6; \shifter_operand`:T6; (valof ((valof ((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9) T9)|C_flag`:T16) T16)] T16)`:T16;;
((valof ((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9) T9)|V_flag`:T16) `= (call (\OverflowFrom_add3`:T36) E[\old_Rn`:T6; \shifter_operand`:T6; (valof ((valof ((valof (`*(\proc`:T2)`:T8) T8)|cpsr`:T9) T9)|C_flag`:T16) T16)] T16)`:T16
else skip
else skip |}.

Definition fun_ADC :=
  (ADC, Internal fun_internal_ADC).

Definition functions : list (prod ident fundef) := [fun_printf_ii; fun___builtin_fabs; fun___builtin_memcpy_aligned; fun___builtin_annot_intval; fun___builtin_bswap; fun___builtin_fsqrt; fun___builtin_fmax; fun___builtin_fmin; fun___builtin_read16_reversed; fun___builtin_read32_reversed; fun___builtin_write16_reversed; fun___builtin_write32_reversed; fun_abort; fun___assert_fail; fun_ConditionPassed; fun_copy_StatusRegister; fun_addr_of_reg_m; fun_reg_m; fun_set_reg_m; fun_reg; fun_set_reg; fun_inst_size; fun_set_pc_raw; fun_set_reg_or_pc; fun_CurrentModeHasSPSR; fun_spsr; fun_CarryFrom_add2; fun_CarryFrom_add3; fun_OverflowFrom_add2; fun_OverflowFrom_add3; fun_get_bit; fun_ADC].

(* program *)

Definition p :=
  {| prog_funct := functions;
     prog_main := main;
     prog_vars := global_variables |}.
