\svnidlong
{$HeadURL$}
{$LastChangedDate$}
{$LastChangedRevision$}
{$LastChangedBy$}

% Author: \svnfileauthor; Revision: \svnfilerev; Last changed on: \svnfiledate; 
% URL: \url{\svnkw{HeadURL}}

\begin{thoughts}
\itshape
\hfil -----------------------------------------------------------------------------------\par
\hfil \textbf{Changes on \currfilename}

Author: \svnfileauthor; Revision: \svnfilerev; Last changed on: \svnfiledate
\end{thoughts}

% svn propset svn:keywords 'LastChangedBy LastChangedRevision LastChangedDate HeadURL' thisfile.tex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
\label{sec:intro}


The work described here is motivated by an experiment reported in \cite{rapido11,cpp11},
called SimSoc-Cert (a certified simulator of Systems on Chips)
where we develop proofs of C programs using the operational semantics of
a large subset of the C language as defined in the CompCert %\furl{http://compcert.inria.fr/}
project \cite{Leroy-Compcert-CACM}.
An important characteristic of our framework is 
the large complexity of the specification,
driving us to use powerful features such as higher-order functions,
dependent types, modules,
not only for convenience, 
but in order to keep the specification as readable and reusable as possible.
Still, its size is rather large by force, since it includes the behavior of 
several commercial processors (currently: ARM and SH4).
In such a framework, 
there is little hope for full automation.
Proofs are performed by alternating clues given by the human user 
and tedious steps that are expected to be automated.
Though all this is well-known, 
the situation can become very tricky when automated steps 
produce goals with many new variables and hypotheses in the environment. 
In an interactive setting, their names can be refered to later
in the script.
% At least in a simple approach using basic tactics,
% an option that we don't want to discard a priori.
This issue cannot be overlooked,
despite the lack of a nice theory on massive names management
-- up to our knowledge.
And it actually occurs with SimSoc-Cert,
because proofs rely heavily on \emph{inversion} steps on 
hypotheses relating memory states of the program,
according to a large inductive transition relation 
which is the heart of the operational semantics of C defined in CompCert.

In a few words, an inversion is a kind of forward reasoning step,
which allows us to extract all useful information contained in a
hypothesis. 
It is nothing but a case analysis on a carefully prepared goal
(more detail to come in Section \ref{sec:inversion}).
%
The practical need for automating inversion has been identified
many years ago
and most proof assistants (Isabelle, Coq, Matita,...)
provide an appropriate mechanism.
The first implementations for Coq and LEGO
are analyzed and explained in
\cite{cornes95automating} for Coq
and \cite{McBride96} for LEGO.
Since then, the main tool available to the Coq user is
a tactic called \inversion which,
basically performs a case analysis over a given hypothesis
according to its specific arguments,
removes absurd cases,
introduces relevant premises in the environment
and performs suitable substitutions in the whole goal.
%
This tactic works remarkably well,
though it fails in rare intricate cases,
as reported in mailing lists (see also Section \ref{sec:finset}).
%
An additional approach called BasicElim was proposed in \cite{mcbride00}.
It is implemented in Matita \cite{ricciottiPhd}, for instance.
BasicElim is available in Coq as well.

However, the price to pay for the generality
of \inversion and BasicElim
is a high complexity of underlying proof-terms.
Does it reflect an unnecessarily complex formalization of a 
(at first sight) rather simple idea?
A practical consequence is that
unpleasantly heavy proof terms can unexpectedly occur in
functions defined in interactive mode.
For developments 
which make an intensive use of inversion,
such as SimSoc-Cert, 
the evaluation of scripts is painfully slowed down.

However, the abovementioned issue on name management
turns out to be still much more important:
hardly controlled names are introduced in the environment.
This would not be an issue if we don't see them, 
e.g., if the generated goals can be automatically discharged.
But this is hopeless when dealing with complex specifications,
as in our case.
In general, the sequel of the script refers to generated hypotheses.
Typically, introduced hypotheses could be inverted again, and so on.
This poses a very serious problem of robustness:
updating the inductive relation or
even minor modifications in another part of the development
may result in a complete renaming 
inside a proof script,
which has then to be debugged line by line.
%
In the previous stage of our work reported in \cite{cpp11}, 
we could perform a proof on a single instruction of the ARM processor.
So in theory, everything was solved.
However, the number of inversion steps was so large
this proof could not survive the various updates of Coq and CompCert.
% the work could be carried out for
% the whole instruction set.
% In practice this is just wrong.

%
The available version of \inversion where explicit names
can be given in the script (\inversion... \as)
is better for robustness, 
but too heavy for our needs:
each inversion would require the introduction of many (often more than ten)
additional names.
%
% Still, their number and contents are hard to predict.
%
BasicElim raises similar issues, 
though its behaviour is more regular.

In order to get scripts which are both robust and much shorter,
we want to provide programmable inversion tactics,
requiring only a few explicit names. 
To this effect, we propose a handcrafted approach to inversion.
The initial idea for this inversion was exposed in \cite{small_inv}
(and is recalled here in Section \ref{sec:absurd})
but, in order to be general enough,
it had to be revisited with inspiration coming from
the impredicative encoding of inductive datatypes.

% In the SimSoC-cert project \cite{cpp11}, 
% we use this semantics to perform proofs of 
% an instruction set simulator for ARM,
% which is at the heart of SimSoC~\cite{rapido11}, 
% a simulator of embedded systems written in C and C++.
% Many inversions are needed in our proofs.


% In \cite{small_inv}, 
% the first author introduced a technique 
% for performing
% so-called \emph{small inversions}. 
% This technique is rather flexible and is available in several variants.
% Our goal was to demystify the magics behind \inversion
% and to propose a practical hand-crafted alternative
% to this tactic, 
% providing much smaller proof terms as well as
% a full control of the user on the behavior of inversion.
% The idea was illustrated only on very simple examples
% and had to be validated on realistic applications. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% We report here such an experiment, 
% in the framework of the SimSoC-cert project introduced above.
% It turned out that significant changes had to
% be made in order to make the initial idea able
% to scale up.
%
% The contributions presented here are then:
% \begin{itemize}
% \item an improvement of the main variant from \cite{small_inv},
%   which makes 
%   it both simpler to use and more powerful;
% \item its illustration on a significant application,
%   which involves an intensive use of inversions on 
%   big inductive relations coming from the Compcert project.
% \end{itemize}

The concrete setting considered here is the Coq proof assistant,
but the technique can be adapted to any proof assistant based
on the Calculus of Inductive constructions or a similar type theory, 
such as LEGO or Matita. %or Agda.
% \begin{thoughts}
% For Agda, the situation is more complicated: 
% as Agda has a more powerful dependent pattern match:
% for instance the inversions for even work directly, 
% without specific auxiliary definition.
% \end{thoughts}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The rest of the paper is organized as follows.
Section~\ref{sec:inversion} recalls the basics on inversion.
Section~\ref{sec:hci} explains our technique for
performing inversions.
% Section~\ref{sec:absurd}
% recalls the principle of small inversions as introduced in \cite{small_inv}.
% Section~\ref{sec:improvement} then explains its limitations
% and how to overcome them,
Section~\ref{sec:simsoccert} contains a summary
of the application to SimSoC-cert.
We conclude in Section~\ref{sec:conclusion} with a comment
on our achievements and some perspectives.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Inversion}
\label{sec:inversion}

Type-theoretic settings such as Coq \cite{CoqManualV83,BC04,cpdt}
offer two elementary ways of constructing new objects:
functions and inductive types\footnote{%
Co-inductive types are available as well. 
However, this paper does not depend on issues related to finiteness
of computations:
what is said about inductive types holds as well for co-inductive types.
}. 
%\todo{Inductive are used for datatypes and relations, fixpoints for functions.}
%
For instance, even Peano natural numbers can be inductively characterized 
by the following two rules:

\[
\begin{prooftree}
\using {\coqdocvar{E0}}
\justifies\coqdocvar{even\_i}~ 0
\end{prooftree}
\qquad
\begin{prooftree}
\coqdocvar{even\_i}~ n
\using {\coqdocvar{E2}}
\justifies\coqdocvar{even\_i (S (S n))}
\end{prooftree}
\]


%\coqdocinput{chunk1}

\noindent
Rules \coqdocvar{E0} and \coqdocvar{E2}
serve as canonical justifications for \coqdocvar{even\_i}, 
they are called the \emph{constructors} of the inductive definition.

Now, assume a hypothesis $H$ claiming
that \coqdocvar{even\_i (S (S (S x)))} for some natural number $x$.
Then, by looking at the definition of \coqdocvar{even\_i}, 
we see that only \coqdocvar{E2} could justify $H$,
and we can conclude that \coqdocvar{even\_i (S x)}.
Similarly,  \coqdocvar{even\_i} 1 can be considered as an
absurd hypothesis, since \coqdocvar{(S 0)} matches neither
0 nor \coqdocvar{(S (S n))}, 
none of the two possible canonical ways of proving \coqdocvar{even\_i},
namely \coqdocvar{E0} and \coqdocvar{E2} can be used.
Such proof steps are called \emph{inversions},
because they use justifications such as \coqdocvar{E0} and \coqdocvar{E2}
in the opposite way, i.e.,
from their conclusion to their premises. 
Note that \coqdocvar{even\_i} 3, \coqdocvar{even\_i} 5, etc. 
%do not immediately yield the absurd by inversion.
do not immediately yield the contradiction by inversion.
However, by iterating the first inversion step, we eventually get
\coqdocvar{even\_i} 1 and then the desired result using a last inversion.
This illustrates that inversion is closer to case analysis than to induction.

Indeed, as we will see below, 
inversion can be decomposed into elementary proof steps,
where the key step is a primitive case analysis on the considered
inductive object (the hypothesis $H$, in our previous example). 
However, this decomposition is very often far from trivial because,
in the general case, rules may include several premises,
premises and conclusions may have several arguments and
some of these arguments can be shared.
Still, inversion turns out to be extremely useful in practice.
Well-known instances are related to programming languages,
whose semantics is described using complex inductively defined
relations. 

Note that it may be worth considering a (recursive) \emph{function}
for defining a predicate, rather than an inductive relation.
For instance, in Coq syntax, an alternative way to specify even
numbers is as follows:

% Now, assume a goal containing a hypothesis $H$ claiming
% that \coqdocvar{even\_i (S x)} for some natural number $x$.
% Then, by looking at the definition of \coqdocvar{even\_i}, 
% we can conclude that $x$ is \coqdocvar{(S y)}
% for some $y$ satisfying \coqdocvar{even\_i y}.

\medskip
\coqdocinput{chunk11}
\medskip

\noindent
Here \coqdocvar{True} denotes a trivially provable proposition,
and \coqdocvar{False} denotes an absurd proposition.
%
Using \coqdocvar{even\_f} is much simpler in the previous situations:
for instance, \coqdocvar{even\_f (S (S (S x)))} just \emph{reduces} to
\coqdocvar{even\_f (S x)} using computation.
In other words, computation provides inversion for free.
Therefore, one may wonder why we should bother with inductively defined
relations.
Two kinds of answers can be given.

One of them is that an inductive definition allows us 
to focus exactly on the relevant values
whereas, with functional definitions,
we have to deal with the full domain,
which can be much bigger in general.
In our example above,
suppose that we want to prove a statement such as
$\forall n, \mathit{even}\:n \impl P\: n$.
We can always attempt an induction on $n$,
but this strategy forces to reason on all numbers, 
including odd numbers.
%If even is encoded with even_f,
If $\mathit{even}$ is the recursive function above \coqdocvar{even\_f},
%this is no other option.
there is no other option.
However, using \coqdocvar{even\_i}, 
we have the additional opportunity to make an induction on 
(the shape of) $\coqdocvar{even\_i}\;n$,
without needing to bother about odd numbers.

Another issue is that it is not always convenient or even possible to
provide a functional definition of a predicate.
Whenever possible,
an $n$-ary relation $R$ on $A_1 \times \ldots A_n$, % with $n \ge 2$,
is advantageously modeled by a function from $A_1, \ldots A_{n-1}$ to $A_n$.
But it requires $R$ to be functional (deterministic) and moreover,
in type-theoretical settings such as CIC, to be total.
If the relation is non-deterministic,
we still can try to 
define it by a function returning either \coqdocvar{True}
or \coqdocvar{False}, as is the case for \coqdocvar{even\_f};
this essentially amounts to providing a decision procedure for 
the intended predicate\footnote{
Note that a 1-ary relation $P$ on $A_1$ is isomorphic to a 
binary relation on $\mathbf{1}\times A_1$,
where $\mathbf{1}$ is a type with exactly one inhabitant.
If $P$ holds for at least two values on $A_1$, 
it can be clearly considered as a non-deterministic 
function from $\mathbf{1}$ to $A_1$.
}.
This is not always possible 
%
% \begin{thoughts}
% Encode the predicate saying that f: nat $\fl$ nat has a zero
% \[
% \begin{prooftree}
% n: \coqdocvar{nat} \qquad \coqdocvar{f}~ n = 0 
% \using {\coqdocvar{has\_zero\_intro}}
% \justifies\coqdocvar{has\_zero f}
% \end{prooftree}
% \]
% \end{thoughts}
%
and, even if we can find such an
algorithm, it may be hindered by undesired encoding tricks,
which will induce additional complications in proofs. 
Moreover, a requirement of formal methods expresses that
high-level definitions and statements should be as clear 
as possible in order to be convincing. 
The inductive style is not always better than the functional
style, but it is often enough the case so that we cannot
ignore it. 
For technical reasons, it is sometimes worth considering
a functional version and an inductive version of the same notion.
Even if the functional version is much better at inversion-like
proof steps, 
the two versions have to be proved equivalent and there,
the need for inverting the inductive version almost inevitably shows up.

Inductive relations are commonly used for defining
the operational semantics of programming languages,
either in small-step or in big-step style \cite{nielson}. 
Such semantics define transitions between states,
language constructs and,
very often, additional arguments such as input/output events. 
% They are inductively defined, 
% with at least one rule for each language construct. 
A tutorial example of a toy (but Turing-complete) language 
formally defined in Coq along these lines
is given in \cite{Pierce:SF}
and routinely used as a teaching support in many universities.
The Compcert project \cite{Leroy-Compcert-CACM}
is of course a much more involved example.
  

% \begin{thoughts}
% All these considerations are especially relevant in the case
% of the operational semantics of programming languages,
% either in small-step or in big-step style \cite{nielson}. 
% Such semantics define transitions between states,
% language constructs and,
% very often, additional arguments such as input/output events. 
% They are inductively defined, 
% with at least one rule for each language construct. 
% A tutorial example of a toy (but Turing-complete) language 
% formally defined in Coq along these lines
% is given in \cite{Pierce:SF}
% and routinely used as a teaching support in many universities.
% A much more involved example
% is the semantics of a fairly large subset of C, as defined in 
% the Compcert project \cite{Leroy-Compcert-CACM}.
  
% \end{thoughts}



%%% Local Variables: 
%%% mode: latex
%%% TeX-master: "itp13"
%%% End: 
